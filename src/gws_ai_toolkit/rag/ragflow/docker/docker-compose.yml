services:
  es01:
    container_name: ${CONTAINER_PREFIX}-ragflow-es-01
    profiles:
      - elasticsearch
    image: elasticsearch:8.11.3
    volumes:
      - ${LAB_VOLUME_HOST}/esdata01:/usr/share/elasticsearch/data
    # ports:
    #   - 1200:9200
    environment:
      - node.name=es01
      - ELASTIC_PASSWORD=${PASSWORD}
      - bootstrap.memory_lock=false
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - cluster.routing.allocation.disk.watermark.low=5gb
      - cluster.routing.allocation.disk.watermark.high=3gb
      - cluster.routing.allocation.disk.watermark.flood_stage=2gb
      - TZ=Asia/Shanghai
    mem_limit: 8073741824
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:9200"]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - ragflow
    # restart: on-failure

  mysql:
    # mysql:5.7 linux/arm64 image is unavailable.
    image: mysql:8.0.39
    container_name: ${CONTAINER_PREFIX}-ragflow-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${PASSWORD}
      - TZ=Asia/Shanghai
    command:
      --max_connections=1000
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --default-authentication-plugin=mysql_native_password
      --tls_version="TLSv1.2,TLSv1.3"
      --init-file /data/application/init.sql
      --binlog_expire_logs_seconds=604800
    # ports:
    #   - 5455:3306
    volumes:
      - ${LAB_VOLUME_HOST}/mysql_data:/var/lib/mysql
      - ./init.sql:/data/application/init.sql
    networks:
      - ragflow
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-uroot", "-p${PASSWORD}"]
      interval: 10s
      timeout: 10s
      retries: 3
    restart: on-failure

  minio:
    image: quay.io/minio/minio:RELEASE.2025-06-13T11-33-47Z
    container_name: ${CONTAINER_PREFIX}-ragflow-minio
    command: server --console-address ":9001" /data
    # ports:
    #   - 9000:9000
    #   - 9001:9001
    environment:
      - MINIO_ROOT_USER=rag_flow
      - MINIO_ROOT_PASSWORD=${PASSWORD}
      - TZ=Asia/Shanghai
    volumes:
      - ${LAB_VOLUME_HOST}/minio_data:/data
    networks:
      - ragflow
    # restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  redis:
    # swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/valkey/valkey:8
    image: valkey/valkey:8
    container_name: ${CONTAINER_PREFIX}-ragflow-redis
    command: redis-server --requirepass ${PASSWORD} --maxmemory 128mb --maxmemory-policy allkeys-lru
    ports:
      - 6379:6379
    volumes:
      - ${LAB_VOLUME_HOST}/redis_data:/data
    networks:
      - ragflow
    # restart: on-failure
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  ragflow:
    depends_on:
      mysql:
        condition: service_healthy
    image: infiniflow/ragflow:v0.20.3-slim

    container_name: ${CONTAINER_PREFIX}-ragflow-server
    # ports:
    #   # - 80:80
    #   - 5678:5678
    #   - 5679:5679
    #   - 9382:9382 # entry for MCP (host_port:docker_port). The docker_port must match the value you set for `mcp-port` above.
    volumes:
      - ./ragflow-logs:/ragflow/logs
      - ./nginx/ragflow.conf:/etc/nginx/conf.d/ragflow.conf
      - ./nginx/proxy.conf:/etc/nginx/proxy.conf
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ${LAB_VOLUME_HOST}/history_data_agent:/ragflow/history_data_agent
      - ./service_conf.yaml.template:/ragflow/conf/service_conf.yaml.template
      - ./entrypoint.sh:/ragflow/entrypoint.sh
    environment:
      - TZ=Asia/Shanghai
      - HF_ENDPOINT=
      - MACOS=
    networks:
      - ragflow
      - gencovery-network-prod
    # restart: on-failure
    # https://docs.docker.com/engine/daemon/prometheus/#create-a-prometheus-configuration
    # If you use Docker Desktop, the --add-host flag is optional. This flag ensures that the host's internal IP is exposed to the Prometheus container.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      - "traefik.enable=true"
      # Config for the HTTPS glab domain to port 3080
      - "traefik.http.routers.ragflow-web-router.rule=host(`ragflow.new-rio.gencovery.io`)"
      - "traefik.http.routers.ragflow-web-router.service=ragflow-web-service"
      - "traefik.http.services.ragflow-web-service.loadbalancer.server.port=80"
      # Enable HTTPS
      - "traefik.http.routers.ragflow-web-router.entrypoints=websecure"
      - "traefik.http.routers.ragflow-web-router.tls=true"
      - "traefik.http.routers.ragflow-web-router.tls.certresolver=myresolver"
      - "traefik.docker.network=gencovery-network-prod" # define which network traefik should use


networks:
  ragflow:
    driver: bridge
  gencovery-network-prod:
     external: true
