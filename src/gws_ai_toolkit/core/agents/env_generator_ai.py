"""
[Generated by Task Expert Agent]

This module contains tasks that use the EnvAgentAi agent to generate environment files
(conda/mamba/pipenv) based on user requirements and optional existing problematic files.
"""

import os
from typing import Optional

from gws_ai_toolkit.core.agents.env_agent_ai import EnvAgentAi
from gws_ai_toolkit.core.agents.env_agent_ai_events import (
    EnvInstallationSuccessEvent, ErrorEvent, FunctionErrorEvent)
from gws_core import (ConfigParams, ConfigSpecs, File, OutputSpec, OutputSpecs,
                      StrParam, Task, TaskInputs, TaskOutputs, TextParam,
                      YamlCodeParam, task_decorator)
from openai import OpenAI
from typing_extensions import Literal


def _generate_env_file(
    task: Task,
    env_type: Literal["conda", "mamba", "pipenv"],
    user_prompt: str,
    existing_env_content: Optional[str]
) -> str:
    """
    Private shared function to generate environment files using EnvAgentAi.

    Args:
        task: The task instance (for logging)
        env_type: Type of environment manager ("conda", "mamba", or "pipenv")
        user_prompt: User description of package requirements
        existing_env_content: Optional existing environment file content to fix

    Returns:
        Generated environment file content as a string

    Raises:
        Exception: If generation fails or no content is generated
    """
    # Log the task start
    task.log_info_message(f"Starting {env_type} environment generation...")
    task.log_info_message(f"User requirements: {user_prompt}")

    if existing_env_content:
        task.log_info_message("Using existing environment file content for analysis...")

    # Get OpenAI client
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise ValueError(
            "OPENAI_API_KEY environment variable is not set. "
            "Please set it before running this task."
        )

    openai_client = OpenAI(api_key=api_key)

    # Create the EnvAgentAi (only generate, don't install)
    agent = EnvAgentAi(
        openai_client=openai_client,
        model="gpt-4",
        temperature=0.7,
        env_type=env_type,
        existing_env_content=existing_env_content,
    )

    # Process the agent events
    generated_content: Optional[str] = None

    try:
        for event in agent.call_agent(user_prompt):
            # Handle generated environment file event
            if isinstance(event, EnvInstallationSuccessEvent):
                generated_content = event.env_file_content
                task.log_success_message(f"Successfully generated {env_type} environment file")

            # Handle error events
            elif isinstance(event, (ErrorEvent, FunctionErrorEvent)):
                error_msg = getattr(event, 'message', str(event))
                task.log_error_message(f"Error during generation: {error_msg}")

    except Exception as e:
        task.log_error_message(f"Exception during agent execution: {str(e)}")
        raise

    # Validate that we received the generated content
    if not generated_content:
        raise Exception("No environment file content was generated by the AI agent, please check the logs for details.")

    task.log_success_message(f"Environment file generated successfully with {len(generated_content)} characters")

    return generated_content


@task_decorator("CondaEnvGeneratorAi",
                human_name="Generate Conda/Mamba Environment",
                short_description="Generate conda/mamba environment YAML files using AI")
class CondaEnvGeneratorAi(Task):
    """
    This task generates conda/mamba environment YAML files using the EnvAgentAi agent.
    It leverages OpenAI to create valid environment configurations based on user requirements.

    ## Inputs
    - None (no input resources required)

    ## Configuration Parameters
    - **env_type**: Select between "conda" or "mamba" environment manager
    - **user_prompt**: Describe the packages and version requirements you need
    - **existing_env_file** (optional): Provide an existing YAML environment file that has installation problems to fix

    ## Outputs
    - **env_file**: A YAML file containing the generated environment.yml content

    ## Usage
    1. Select the environment type (conda or mamba)
    2. Describe your package requirements in the user_prompt
    3. Optionally provide an existing environment file that needs fixing
    4. The AI will generate a valid environment YAML file based on your requirements

    ## Notes
    - The task only generates the YAML file; it does NOT install the environment
    - The agent uses OpenAI to analyze requirements and generate appropriate configurations
    - If you provide an existing file with errors, the AI will attempt to fix those issues
    - The generated file can be used with `conda env create -f environment.yml` or `mamba env create -f environment.yml`
    """

    input_specs = {}

    output_specs = OutputSpecs({
        'env_file': OutputSpec(
            File,
            human_name="Environment YAML file",
            short_description="Generated conda/mamba environment.yml file"
        )
    })

    config_specs = ConfigSpecs({
        'user_prompt': TextParam(
            human_name="Package requirements",
            short_description="Describe what packages you want and any version requirements"
        ),
        'env_type': StrParam(
            allowed_values=["conda", "mamba"],
            default_value="mamba",
            human_name="Environment type",
            short_description="Select conda or mamba environment manager"
        ),
        'existing_env_file': YamlCodeParam(
            human_name="Existing environment file (optional)",
            short_description="An existing YAML environment file that has installation problems",
            optional=True
        )
    })

    def run(self, params: ConfigParams, inputs: TaskInputs) -> TaskOutputs:
        """
        Run the task to generate a conda/mamba environment YAML file.

        Args:
            params: Configuration parameters containing env_type, user_prompt, and optional existing_env_file
            inputs: Task inputs (none expected)

        Returns:
            TaskOutputs containing the generated environment YAML file
        """
        # Get configuration parameters
        env_type: Literal["conda", "mamba"] = params.get_value('env_type')
        user_prompt: str = params.get_value('user_prompt')
        existing_env_content: Optional[str] = params.get_value('existing_env_file')

        # Use shared function to generate content
        generated_content = _generate_env_file(
            task=self,
            env_type=env_type,
            user_prompt=user_prompt,
            existing_env_content=existing_env_content
        )

        # Create the output File resource
        output_file = File(f"environment_{env_type}.yml")
        output_file.write(generated_content)
        output_file.name = f"environment_{env_type}.yml"

        return {'env_file': output_file}


@task_decorator("PipEnvGeneratorAi",
                human_name="Generate Pipenv Environment",
                short_description="Generate pipenv Pipfile using AI")
class PipEnvGeneratorAi(Task):
    """
    This task generates pipenv Pipfile files using the EnvAgentAi agent.
    It leverages OpenAI to create valid Pipfile configurations based on user requirements.

    ## Inputs
    - None (no input resources required)

    ## Configuration Parameters
    - **user_prompt**: Describe the packages and version requirements you need
    - **existing_pipfile** (optional): Provide an existing Pipfile that has installation problems to fix

    ## Outputs
    - **env_file**: A file containing the generated Pipfile content

    ## Usage
    1. Describe your package requirements in the user_prompt
    2. Optionally provide an existing Pipfile that needs fixing
    3. The AI will generate a valid Pipfile based on your requirements

    ## Notes
    - The task only generates the Pipfile; it does NOT install the environment
    - The agent uses OpenAI to analyze requirements and generate appropriate configurations
    - If you provide an existing file with errors, the AI will attempt to fix those issues
    - The generated file can be used with `pipenv install`
    """

    input_specs = {}

    output_specs = OutputSpecs({
        'env_file': OutputSpec(
            File,
            human_name="Pipfile",
            short_description="Generated Pipfile for pipenv"
        )
    })

    config_specs = ConfigSpecs({
        'user_prompt': TextParam(
            human_name="Package requirements",
            short_description="Describe what packages you want and any version requirements"
        ),
        'existing_pipfile': TextParam(
            human_name="Existing Pipfile (optional)",
            short_description="An existing Pipfile that has installation problems",
            optional=True
        )
    })

    def run(self, params: ConfigParams, inputs: TaskInputs) -> TaskOutputs:
        """
        Run the task to generate a pipenv Pipfile.

        Args:
            params: Configuration parameters containing user_prompt and optional existing_pipfile
            inputs: Task inputs (none expected)

        Returns:
            TaskOutputs containing the generated Pipfile
        """
        # Get configuration parameters
        user_prompt: str = params.get_value('user_prompt')
        existing_env_content: Optional[str] = params.get_value('existing_pipfile')

        # Use shared function to generate content
        generated_content = _generate_env_file(
            task=self,
            env_type="pipenv",
            user_prompt=user_prompt,
            existing_env_content=existing_env_content
        )

        # Create the output File resource
        output_file = File("Pipfile")
        output_file.write(generated_content)
        output_file.name = "Pipfile"

        return {'env_file': output_file}
